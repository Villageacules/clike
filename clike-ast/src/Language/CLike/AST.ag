-------------------------------------------------------------------------------------------
-- Haskell wrapping around AG CLike AST
-------------------------------------------------------------------------------------------

MODULE {Language.CLike.AST}
    { AGItf(..), AGItfPrePr(..), AGItfExpr(..), AGItfName(..), AGItfPrePrExpr(..)
    , Decl(..), DeclL
    , PrePr(..), PrePrL
    , PrePrExpr(..)
    , Expr(..), ExprL
    , Lit(..)
    , Name(..), NameL
    
    , Op
    
    , Module(..)

    , module Language.CLike.Lexer
    
    , nmKey
    
    , Err
    , mkErr
    }
{
import Language.CLike.Lexer(Pos, Token, TokenKind(..), LexString)
}

INCLUDE "AST/AbsSyn.ag"
INCLUDE "AST/NameKey.ag"

-- DERIVING Name : Show

-------------------------------------------------------------------------------------------
-- Operators
-------------------------------------------------------------------------------------------

{
-- | Operator is just a TokenKind
type Op = TokenKind
}

-------------------------------------------------------------------------------------------
-- Key of a Name, available on Haskell level
-------------------------------------------------------------------------------------------

WRAPPER AGItfName

{
-- | Get the key used to access Env info
nmKey :: Name -> LexString
nmKey e
  = (maybe "??" id $ mbKey_Syn_AGItfName r)
  where r = wrap_AGItfName
              (sem_AGItfName (AGItfName_AGItf e))
              (Inh_AGItfName {})
}

-------------------------------------------------------------------------------------------
-- Error
-------------------------------------------------------------------------------------------

{
-- | Error is (for now) just a string
type Err = String

-- | Combine error msg and position
mkErr :: Pos -> String -> [Err]
mkErr p s = [s ++ " (" ++ show p ++ ")"]
}
